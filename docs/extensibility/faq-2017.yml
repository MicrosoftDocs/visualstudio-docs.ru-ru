### YamlMime:FAQ
metadata:
  title: Часто задаваемые вопросы о расширяемости
  description: в этой статье содержатся ответы на некоторые часто задаваемые вопросы о расширяемости для Visual Studio 2017.
  ms.custom: SEO-VS-2020
  ms.date: 11/09/2016
  ms.topic: conceptual
  ms.assetid: 345855db-0cc3-45aa-8c57-bb18d9789772
  author: kevinfansler
  ms.author: madsk
  manager: jmartens
  monikerRange: vs-2017
  ms.openlocfilehash: 31f536c99c0a050ebb3b315b8209a32c4a1d9130
  ms.sourcegitcommit: 3c6c263a1c0b20f084290ce45295a46027da33b6
  ms.translationtype: MT
  ms.contentlocale: ru-RU
  ms.lasthandoff: 07/14/2021
  ms.locfileid: "113757531"
title: часто задаваемые вопросы о расширяемости Visual Studio 2017
summary: ниже приведены некоторые часто задаваемые вопросы о расширяемости для Visual Studio 2017.
sections:
- name: Не учитывается
  questions:
  - question: >
      Что такое история обратной совместимости для расширений?
    answer: >
      новый формат vsix v3 обратно совместим с VSIX версии 2, поэтому вы по-прежнему можете иметь один vsix с одним идентификатором vsix, который поддерживает Visual Studio 2012 и более поздних версий. Новый формат VSIX v3 не поддерживает Visual 2010 и более ранних версий. для поддержки Visual Studio 2010, необходимо создать отдельное расширение (с отдельным идентификатором VSIX). поскольку Visual Studio 2010 теперь представляет собой небольшой процент от пользовательской базы данных, рекомендуется использовать существующий идентификатор vsix для расширения, поддерживающего Visual Studio 2012 или более поздней версии, и назначить новый идентификатор vsix в Visual Studio 2010.
  - question: >
      зачем мне нужно объявлять необходимые компоненты для Visual Studio 2017?
    answer: >
      Visual Studio 2017 обеспечивает более быструю и облегченную установку Visual Studio, предлагающую пользователям повышать контроль над установленными рабочими нагрузками и компонентами. чтобы убедиться в том, что компоненты, необходимые для расширения, установлены с VSIX v3 и Visual Studio 2017, необходимо объявить компоненты, от которых зависит расширение. Если какие – либо необходимые компоненты недоступны на компьютере пользователя, пользователь не сможет запустить расширение. однако если Visual Studio обнаружит, что пользователь пытается установить расширение, для которого требуются отсутствующие компоненты, пользователю будет предложено установить необходимые компоненты. При наличии дополнительных компонентов нет необходимости перечислять их в качестве необходимых компонентов при условии, что вы выполняете соответствующее обнаружение компонентов во время выполнения. Все расширения должны указывать основной компонент редактора как зависимость `Microsoft.VisualStudio.Component.CoreEditor` .
  - question: >
      Какой уровень детализации вы значите, если говорить о предварительных требованиях?
    answer: >
      Вы объявляете необходимые компоненты на уровне компонента, то есть отдельные параметры, которые можно выбрать в пользовательском интерфейсе. Предварительные требования не объявляются для рабочих нагрузок или отдельных библиотек DLL.
  - question: >
      Где найти список идентификаторов компонентов, чтобы можно было объявлять зависимости?
    answer: >
      чтобы найти список идентификаторов компонентов, ознакомьтесь с [идентификаторами рабочей нагрузки Visual Studio 2017 и компонентов](../install/workload-and-component-ids.md?view=vs-2019&preserve-view=true). Если вы не уверены, какой компонент содержит конкретный двоичный файл, можно скачать [электронную таблицу сопоставления > компонентов](https://aka.ms/vs2017componentid-binaries). дополнительные сведения об использовании электронной таблицы см. в разделе **поиск идентификаторов компонентов** статьи [руководство. перенос проектов расширяемости в Visual Studio 2017](how-to-migrate-extensibility-projects-to-visual-studio-2017.md).
  - question: >
      моему расширению требуется Visual Studio 15,3, как обеспечить это требование?
    answer: >
      если для расширения требуется определенная версия Visual Studio 2017, то, например, она зависит от функции, выпущенной в 15,3, можно указать номер сборки в VSIX **InstallationTarget**. Например, выпуск 15,3 имеет номер сборки "15.0.26730.3". Сопоставление выпусков для номеров сборки можно увидеть [здесь](../install/visual-studio-build-numbers-and-release-dates.md). Обратите внимание, что использование номера выпуска "15,3" не будет работать правильно.


      Если для расширения требуется 15,3 или более поздней версии, вы объявили **версию InstallationTarget** как [15.0.26730.3, 16,0):


      ```xml

      <Installation>
        <InstallationTarget Id="Microsoft.VisualStudio.Community" Version="[15.0.26730.3, 16.0)" />
      </Installation>

      ```


      всиксинсталлер обнаружит более ранние версии Visual Studio и сообщит пользователю о необходимости последующего обновления.
  - question: >
      Я получаю сообщение об ошибке при попытке отправить расширение.
    answer: >
      Возможно, вы используете старую версию манифеста VSIX. если расширение помечено как поддерживающее Visual Studio 2017, но не использует новый формат манифеста VSIX v3, вы не сможете передать его.
  - question: >
      Я использую собственный установщик. Можно ли продолжить это?
    answer: >
      при использовании Visual Studio 2017 минимальная установка Visual Studio будет значительно меньше, чем предыдущие версии.


      Мы улучшили формат манифеста VSIX для поддержки изменений, необходимых для облегченной установки. Мы рекомендуем предоставить расширение в формате VSIX v3. Может потребоваться поддерживать существующий установщик для определенных сценариев, например, если компоненты устанавливаются за пределами Visual Studio.


      например, если требуется MSBuild, необходимо указать это как необходимое условие в манифесте VSIX. при установке VSIX установщик обеспечит доступность MSBuild.


      затем установщик вызывает всиксинсталлер для установки VSIX с компонентами Visual Studio 2017.
  - question: >
      Можно ли получить дополнительные рекомендации по миграции?
    answer: >
      дополнительные сведения см. в статье [как перенести проекты расширяемости в Visual Studio 2017](how-to-migrate-extensibility-projects-to-visual-studio-2017.md). кроме того, существует отличная запись в блоге, [изменения Visual Studio установки](https://devblogs.microsoft.com/setup/changes-to-visual-studio-15-setup/).
  - question: >
      Разделы справки выполнить регистрацию пакетов?
    answer: >
      Регистрация пакета выполняется так же, как и в прошлом, с записями реестра. Единственное изменение состоит в том, что в реестре теперь размещается демонстрация, и необходимо объявить записи реестра из файла *pkgdef* .


      Если используется `PackageRegistrationAttribute` , это должно происходить автоматически.
  - question: >
      нужно ли мне создать новую запись в галерее для Visual Studio 2017 версии расширения?
    answer: >
      нет, вам не потребуется новая запись в коллекции Visual Studio для обновленного VSIX. при условии, что ваши изменения полностью обратно совместимы со всеми поддерживаемыми версиями. Если расширение не имеет обратной совместимости, рекомендуется разделить расширение на несколько VSIX (даже если временно), каждый из которых имеет собственный идентификатор VSIX и запись в коллекции.
  - question: >
      что делать с расширением, которое в настоящее время поддерживает Visual Studio 2010 и более поздних версий?
    answer: >
      добавьте поддержку Visual Studio 2017 в текущий VSIX и обеспечьте поддержку Visual Studio 2012 и более поздних версий. кроме того, создайте новый VSIX (с новым GUID и записью коллекции) с поддержкой Visual Studio 2010.
  - question: >
      можно ли создать VSIX v3 с Visual Studio 2015?
    answer: >
      Да. существует пакет NuGet, содержащий необходимые средства и задачи для создания манифестов формата VSIX версии 3 в Visual Studio 2015. добавьте ссылку на пакет NuGet `Microsoft.VisualStudio.Sdk.BuildTasks.14.0` в проект расширения среды. Кроме того, необходимо добавить элемент, заданный `VsixType` `v3` в файле проекта:


      ```xml
        <VsixType>v3</VsixType>
      ```
  - question: >
      Можно ли запустить Всиксинсталлер в тихом режиме?
    answer: >
      теперь необходимо передать дополнительные параметры в всиксинсталлер, чтобы было установлено несколько экземпляров Visual Studio 2017.


      ```bash

      vsixinstaller.exe /q /appidinstallpath:"c:\program files (x86)\Microsoft Visual Studio\2017\Enterprise\Common7\IDE\devenv.exe" /appidname:"Visual Studio" /logFile:<path to log file> /skuName:Enterprise /skuVersion:15.0.25810.0 "KendoUI.Mvc.VSPackage.vsix"

      ```
  - question: >
      Почему Всиксинсталлер теперь ждет завершения процессов перед установкой VSIX?
    answer: >
      теперь всиксинсталлер использует подсистему установки Visual Studio для установки необходимых компонентов, определенных в VSIX. перед обновлением установки Visual Studio подсистеме установки требуется, чтобы все процессы, связанные с VS, были завершены.
  - question: >
      Можно ли установить ресурсы расширения в любое расположение с помощью VSIX v3?
    answer: >-
      нет, свойство VSIX v3 `InstallRoot` не позволяет устанавливать что-либо вне структуры папки установки Visual Studio. Поддерживаемые расположения см. в разделе [Установка за пределами папки Extensions](set-install-root.md) .


      компоненты расширения, которые не являются частью Visual Studio, скорее всего, являются одноэлементными на компьютере и устанавливаются один раз для всех экземпляров Visual Studio 2017.


      в этом случае рекомендуется создать msi для компонентов, не являющихся Visual Studio, и получить msi-вызов всиксинсталлер для установки Visual Studio конкретных компонентов.
