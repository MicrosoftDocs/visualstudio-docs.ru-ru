### YamlMime:FAQ
metadata:
  title: Часто задаваемые вопросы. Поиск функции отладки
  description: Часто задаваемые вопросы, которые помогут вам определить функцию отладчика, которая поможет отладить приложение
  ms.custom: ''
  ms.date: 10/01/2019
  ms.topic: conceptual
  helpviewer_keywords:
  - debugging [Visual Studio], find your feature
  author: mikejo5000
  ms.author: mikejo
  manager: jmartens
  ms.workload:
  - multiple
  ms.openlocfilehash: be2f8aa5e625015aec444a76d71433d02da578df
  ms.sourcegitcommit: d4887ef2ca97c55e2dad9f179eec2c9631d91c95
  ms.translationtype: HT
  ms.contentlocale: ru-RU
  ms.lasthandoff: 05/06/2021
  ms.locfileid: "108800432"
title: Часто задаваемые вопросы. Поиск нужной функции отладки в Visual Studio
summary: >
  Если вам нужна помощь по сопоставлению задачи отладки с соответствующей функцией отладчика Visual Studio, используйте ссылки из этой статьи. Приведенный здесь список задач содержит типичные задачи, такие как приостановка кода для отладки, проверка переменных и отправка сообщений в окно **вывода**. Если вам нужны общие сведения о функциях отладчика, обратитесь к разделу [Первое знакомство с отладчиком](debugger-feature-tour.md).
sections:
- name: Не учитывается
  questions:
  - question: >
      Исправление исключения
    answer: >
      - См. раздел [Исправление исключения](write-better-code-with-visual-studio.md#fix-an-exception).
  - question: >
      Приостановка выполнения кода
    answer: "- **Приостановка выполнения кода для проверки строки кода, которая может содержать ошибку**\n\n  Задайте точку останова. Для получения дополнительной информации см. раздел [Использование точек останова](using-breakpoints.md).\n\n- **Приостановка и проверка приложения при достижении определенного состояния**\n\n  Используйте условную точку останова, чтобы управлять тем, где и когда точка останова активируется, с помощью условной логики. Дополнительные сведения см. в разделе [Условия точек останова](using-breakpoints.md#breakpoint-conditions).\n\n- **Приостановка кода только при изменении значения или свойства конкретного объекта**\n\n  Для C++ задайте [точку останова в данных](using-breakpoints.md#BKMK_set_a_data_breakpoint_native_cplusplus). \n  ::: moniker range=\">= vs-2019\"\n  Для приложений, использующих .NET Core 3, можно также задать [точку останова в данных](using-breakpoints.md#BKMK_set_a_data_breakpoint_managed).\n  ::: moniker-end\n\n  В противном случае, только для C# и F#, можно [отслеживать идентификатор объекта с помощью условной точки останова](using-breakpoints.md#using-object-ids-in-breakpoint-conditions-c-and-f).\n\n- **Приостановка кода внутри цикла на определенной итерации**\n\n  Задайте точку останова, используя **количество обращений** в качестве условия. Дополнительные сведения см. в разделе [Количество обращений](using-breakpoints.md#set-a-hit-count-condition).\n\n- **Приостановка кода в начале функции, когда известно имя функции, но не ее расположение**\n\n  Это можно сделать с помощью точки останова в функции. Дополнительные сведения см. в разделе [Задание точек останова в функции](using-breakpoints.md#BKMK_Set_a_breakpoint_in_a_source_file).\n\n- **Приостановка кода в начале нескольких функций с одинаковым именем**\n\n  При наличии нескольких функций с одинаковыми именами (перегруженные функции или функции в разных проектах) можно использовать [точку останова в функции](using-breakpoints.md#BKMK_Set_a_breakpoint_in_a_source_file).\n\n- **Управление точками останова и их отслеживание**\n\n  Используйте окно **Точки останова**. Дополнительные сведения см. в разделе [Управление точками останова](using-breakpoints.md#BKMK_Specify_advanced_properties_of_a_breakpoint_).\n\n- **Приостановка кода и отладка при возникновении определенного обработанного или необработанного исключения**\n\n  Хотя помощник по исправлению ошибок показывает, где произошла ошибка, если вы хотите приостановить выполнение и отладить конкретную ошибку, можно [велеть отладчику прервать выполнение при возникновении исключения](managing-exceptions-with-the-debugger.md#tell-the-debugger-to-break-when-an-exception-is-thrown).\n\n- **Задание точки останова из стека вызовов**\n\n  Если вы хотите приостановить и отладить код при проверке потока выполнения или просмотре функций в окнах **стека вызовов**, см. раздел [Задание точки останова в окне стека вызовов](using-breakpoints.md#BKMK_Set_a_breakpoint_from_debugger_windows).\n\n- **Приостановка кода в указанной инструкции сборки**\n\n  Это можно сделать, [задав точку останова в окне дизассемблирования](using-breakpoints.md#BKMK_Set_a_breakpoint_from_debugger_windows).\n"
  - question: >
      Выполнение кода
    answer: >
      - **Использование команд для пошагового выполнения кода во время отладки**

        Дополнительные сведения см. в разделе [Навигация по коду с помощью отладчика](navigating-through-code-with-the-debugger.md).
  - question: >
      Проверка данных
    answer: >
      - **Проверка значений переменных во время выполнения приложения**

        Наведите указатель мыши на переменные, используя [подсказки по данным](view-data-values-in-data-tips-in-the-code-editor.md), или [проверьте переменные в окне видимых и локальных переменных](autos-and-locals-windows.md).

      - **Наблюдение за изменением значения конкретной переменной**

        Установите контрольное значение для переменной. Дополнительные сведения см. в разделе [Установка контрольных значений для переменных](watch-and-quickwatch-windows.md).

      - **Просмотр слишком длинных строк для окна отладчика**

        Откройте встроенный [визуализатор строк](view-strings-visualizer.md) во время отладки.
  - question: >
      Отладка уже запущенного приложения
    answer: >
      - См. раздел [Присоединение к выполняемому процессу](attach-to-running-processes-with-the-visual-studio-debugger.md).
  - question: >
      Отладка многопоточных приложений
    answer: >
      - См. раздел [Отладка многопоточных приложений](debug-multithreaded-applications-in-visual-studio.md).
  - question: >
      Настройка отладки
    answer: >
      - **Настройка параметров отладчика**

        Сведения о настройке параметров отладчика и параметров проекта отладчика см. в разделе [Параметры отладчика и подготовка](debugger-settings-and-preparation.md).

      - **Настройка сведений, отображаемых в отладчике**

        Вам может потребоваться отобразить сведения, отличные от типа объекта, в качестве значения в различных окнах отладчика. Для кода C#, Visual Basic, F#, и C++/CLI используйте атрибут [DebuggerDisplay](using-the-debuggerdisplay-attribute.md). Для более сложных вариантов можно также настроить пользовательский интерфейс, создав [пользовательский визуализатор](create-custom-visualizers-of-data.md).

        Для машинного кода C++ используйте [платформу NatVis](create-custom-views-of-native-objects.md).
  - question: >
      Дополнительные задачи
    answer: >-
      - **Изменение кода во время сеанса отладки**

        Используйте функцию [Изменить и продолжить](edit-and-continue.md). Для XAML используйте [Горячую перезагрузку XAML](../xaml-tools/xaml-hot-reload.md).

      - **Отправка сообщений в окно вывода без изменения кода**

        Задайте точку трассировки. Дополнительные сведения см. в разделе [Использование точек трассировки](using-tracepoints.md).

      - **Просмотр порядка, в котором вызываются функции**

        См. раздел [Просмотр стека вызовов](how-to-use-the-call-stack-window.md).

      - **Отладка на удаленных компьютерах**

        См. раздел [Удаленная отладка](remote-debugging.md).

      - **Исправление проблем производительности**

        См. раздел [Первое знакомство со средствами профилирования](../profiling/profiling-feature-tour.md).
